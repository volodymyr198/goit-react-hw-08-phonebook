{"version":3,"file":"static/js/421.37530ace.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/FormPhonebook/FormPhonebook.module.css?d55d","components/FormPhonebook/FormPhonebook.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","webpack://react-homework-template/./src/components/ContactList/ContactItem/ContactItem.module.css?7ce2","components/ContactList/ContactItem/ContactItem.jsx","components/ContactList/ContactList.jsx","webpack://react-homework-template/./src/pages/ContactsPage/ContactsPage.module.css?0a45","pages/ContactsPage/ContactsPage.jsx","utils/notification.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"FormPhonebook_form__yE3-g\",\"label\":\"FormPhonebook_label__actQR\",\"input\":\"FormPhonebook_input__iqqEB\",\"btn\":\"FormPhonebook_btn__5b-dH\",\"error\":\"FormPhonebook_error__7SaV1\"};","import React from 'react';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { RotatingLines } from 'react-loader-spinner';\nimport {\n    useAddContactMutation,\n    useFetchContactsQuery,\n} from 'redux/contactsSlice';\nimport { useEffect } from 'react';\n\nimport {\n    notifyAddContact,\n    serverError,\n    addContactNameError,\n} from 'utils/notification';\nimport css from './FormPhonebook.module.css';\n\nconst FormPhonebook = () => {\n    const [addContact, { isLoading, isSuccess, isError }] =\n        useAddContactMutation();\n    const { data: contacts } = useFetchContactsQuery();\n\n    useEffect(() => {\n        if (isSuccess) {\n            notifyAddContact();\n        }\n    }, [isSuccess]);\n\n    useEffect(() => {\n        if (isError) {\n            serverError();\n        }\n    }, [isError]);\n\n    const handleSubmit = (values, { resetForm }) => {\n        const name = values.name;\n        const number = values.phone;\n        contacts.find(\n            contact => contact.name.toLowerCase() === values.name.toLowerCase()\n        )\n            ? addContactNameError(values.name)\n            : addContact({ name, number }) && resetForm();\n    };\n\n    const validationSchema = Yup.object().shape({\n        name: Yup.string()\n            .min(2, 'Too Short!')\n            .max(20, 'Too Long!')\n            .required('Name is required field'),\n\n        phone: Yup.number()\n            .typeError('That does not look like a phone number')\n            .positive(\"A phone number can't start with a minus\")\n            .integer(\"A phone number can't include a decimal point\")\n            .required('A phone number is required'),\n    });\n\n    const initialValues = {\n        name: '',\n        phone: '',\n    };\n\n    return (\n        <>\n            <ToastContainer autoClose={1000} position=\"top-center\" />\n            <Formik\n                initialValues={initialValues}\n                validationSchema={validationSchema}\n                onSubmit={handleSubmit}\n            >\n                <Form className={css.form}>\n                    <label className={css.label}>\n                        Name\n                        <Field\n                            className={css.input}\n                            type=\"text\"\n                            name=\"name\"\n                            placeholder=\"Name\"\n                        />\n                        <ErrorMessage\n                            className={css.error}\n                            name=\"name\"\n                            component=\"div\"\n                        />\n                    </label>\n                    <label className={css.label}>\n                        Number\n                        <Field\n                            className={css.input}\n                            type=\"tel\"\n                            name=\"phone\"\n                            placeholder=\"phone 066 111 11 11\"\n                        />\n                        <ErrorMessage\n                            className={css.error}\n                            name=\"phone\"\n                            component=\"div\"\n                        />\n                    </label>\n                    <button\n                        className={css.btn}\n                        disabled={isLoading}\n                        type=\"submit\"\n                    >\n                        {isLoading && <RotatingLines height=\"20\" width=\"20\" />}\n                        Add contact\n                    </button>\n                </Form>\n            </Formik>\n        </>\n    );\n};\n\nexport default FormPhonebook;\n","// extracted by mini-css-extract-plugin\nexport default {\"label\":\"Filter_label__vEd1E\",\"input\":\"Filter_input__N7T3z\"};","import { useDispatch, useSelector } from 'react-redux';\nimport { DebounceInput } from 'react-debounce-input';\n\nimport { setFilter } from 'redux/filterSlice';\nimport { getFilter } from 'redux/selectors';\nimport css from './Filter.module.css';\n\nconst Filter = () => {\n    const dispatch = useDispatch();\n    const filter = useSelector(getFilter);\n    const valueFilter = payload => {\n        dispatch(setFilter(payload));\n    };\n\n    const changeFilter = e => {\n        valueFilter(e.target.value);\n    };\n\n    return (\n        <label className={css.label}>\n            Find contacts by name\n            <DebounceInput\n                minLength={1}\n                debounceTimeout={300}\n                className={css.input}\n                type=\"text\"\n                value={filter}\n                placeholder=\"Search\"\n                onChange={changeFilter}\n            />\n        </label>\n    );\n};\n\nexport default Filter;\n","// extracted by mini-css-extract-plugin\nexport default {\"contactList\":\"ContactList_contactList__UFVCg\",\"default\":\"ContactList_default__obqAl\"};","// extracted by mini-css-extract-plugin\nexport default {\"contactItem\":\"ContactItem_contactItem__aUSMv\",\"delBtn\":\"ContactItem_delBtn__M7a+p\",\"btn\":\"ContactItem_btn__4QYtA\"};","import { PropTypes } from 'prop-types';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { RotatingLines } from 'react-loader-spinner';\nimport { useEffect } from 'react';\n\nimport { notifyDeliteContact } from 'utils/notification';\nimport { useDeleteContactMutation } from 'redux/contactsSlice';\nimport css from './ContactItem.module.css';\n\nconst ContactItem = ({ id, name, number }) => {\n    const [deleteContact, { isLoading, isSuccess }] =\n        useDeleteContactMutation();\n\n    useEffect(() => {\n        if (isSuccess) {\n            notifyDeliteContact();\n        }\n    }, [isSuccess]);\n\n    return (\n        <li className={css.contactItem}>\n            {name}: <span>{number}</span>\n            <button\n                onClick={() => deleteContact(id)}\n                disabled={isLoading}\n                className={css.btn}\n            >\n                {isLoading && <RotatingLines height=\"20\" width=\"20\" />}\n                Delete\n            </button>\n        </li>\n    );\n};\n\nContactItem.propTypes = {\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n};\n\nexport default ContactItem;\n","import { useSelector } from 'react-redux';\n\nimport css from './ContactList.module.css';\nimport ContactItem from './ContactItem';\nimport { getFilteredContacts } from 'redux/selectors';\n\nimport { useFetchContactsQuery } from 'redux/contactsSlice';\nimport { getFilter } from 'redux/selectors';\n\nconst ContactList = () => {\n    const filter = useSelector(getFilter);\n\n    const { data: contacts, isLoading, error } = useFetchContactsQuery();\n    return (\n        <>\n            {isLoading && <p className={css.default}>...loading</p>}\n            {error && (\n                <p className={css.default}>\n                    Sorry, something went wrong, please try again later!\n                </p>\n            )}\n            {contacts && contacts.length === 0 && <p>There is no contact!</p>}\n            <ul className={css.contactList}>\n                {contacts &&\n                    getFilteredContacts(contacts, filter).map(\n                        ({ id, name, number }) => (\n                            <ContactItem\n                                key={id}\n                                name={name}\n                                number={number}\n                                id={id}\n                            />\n                        )\n                    )}\n            </ul>\n        </>\n    );\n};\n\nexport default ContactList;\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"ContactsPage_wrapper__HYOyv\",\"titlePhone\":\"ContactsPage_titlePhone__ODE41\",\"titleCont\":\"ContactsPage_titleCont__JLcCo\"};","import { useSelector } from 'react-redux';\n\nimport FormPhonebook from 'components/FormPhonebook/';\nimport Filter from 'components/Filter';\nimport ContactList from 'components/ContactList';\nimport { getIsLoggedIn } from 'redux/selectors';\n\nimport css from './ContactsPage.module.css';\n\nconst ContactsPage = () => {\n    const isLoggedIn = useSelector(getIsLoggedIn);\n    return (\n        isLoggedIn && (\n            <div className={css.wrapper}>\n                <h1 className={css.titlePhone}>Phonebook</h1>\n                <FormPhonebook />\n                <h2 className={css.titleCont}>Contacts</h2>\n                <Filter />\n                <ContactList />\n            </div>\n        )\n    );\n};\nexport default ContactsPage;\n","import { toast } from 'react-toastify';\n\nexport const loginError = () => toast.error('Sorry, wrong email or password!');\n\nexport const registerError = () =>\n    toast.error(\n        'Sorry, incorrect data entered! The password must contain at least 7 characters! The mail name must be at least 7 characters long and contain letters!'\n    );\n\nexport const serverError = () =>\n    toast.error('Sorry, something went wrong, please try again later!');\n\nexport const notifyAddContact = () => toast.success('Contact added!');\n\nexport const notifyDeliteContact = () => toast.info('Contact deleted!');\n\nexport const addContactNameError = message =>\n    toast.error(`${message} is already in contacts!`);"],"names":["useAddContactMutation","addContact","isLoading","isSuccess","isError","contacts","useFetchContactsQuery","data","useEffect","notifyAddContact","serverError","validationSchema","Yup","shape","name","min","max","required","phone","typeError","positive","integer","autoClose","position","initialValues","onSubmit","values","resetForm","number","find","contact","toLowerCase","addContactNameError","className","css","type","placeholder","component","disabled","height","width","dispatch","useDispatch","filter","useSelector","getFilter","DebounceInput","minLength","debounceTimeout","value","onChange","e","payload","target","setFilter","id","useDeleteContactMutation","deleteContact","notifyDeliteContact","onClick","error","length","getFilteredContacts","map","getIsLoggedIn","loginError","toast","registerError","message"],"sourceRoot":""}